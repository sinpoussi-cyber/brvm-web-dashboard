# ==============================================================================
# CI/CD PIPELINE - D√©ploiement automatique sur Vercel
# ==============================================================================

name: Deploy to Vercel

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Job 1: Tests et Build
  test-and-build:
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3
      
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: üì¶ Install dependencies
        run: npm ci
      
      - name: üîç Lint code
        run: npm run lint
      
      - name: üèóÔ∏è Build application
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_API_VERSION: ${{ secrets.NEXT_PUBLIC_API_VERSION }}
      
      - name: ‚úÖ Build successful
        run: echo "‚úÖ Build termin√© avec succ√®s"

  # Job 2: D√©ploiement Preview (Pull Requests)
  deploy-preview:
    needs: test-and-build
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3
      
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: üì¶ Install Vercel CLI
        run: npm install -g vercel@latest
      
      - name: üîÑ Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: üèóÔ∏è Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: üöÄ Deploy Preview to Vercel
        id: deploy
        run: |
          URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview_url=$URL" >> $GITHUB_OUTPUT
      
      - name: üí¨ Comment PR with Preview URL
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üöÄ **Preview d√©ploy√© !**\n\nüîó URL: ${{ steps.deploy.outputs.preview_url }}'
            })

  # Job 3: D√©ploiement Production (main branch)
  deploy-production:
    needs: test-and-build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3
      
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: üì¶ Install Vercel CLI
        run: npm install -g vercel@latest
      
      - name: üîÑ Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: üèóÔ∏è Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: üöÄ Deploy to Production
        id: deploy
        run: |
          URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "production_url=$URL" >> $GITHUB_OUTPUT
      
      - name: ‚úÖ Deployment successful
        run: |
          echo "üéâ D√©ploiement en production r√©ussi !"
          echo "üîó URL: ${{ steps.deploy.outputs.production_url }}"
      
      - name: üìä Create deployment summary
        run: |
          echo "## üöÄ D√©ploiement Production" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Status:** D√©ploy√© avec succ√®s" >> $GITHUB_STEP_SUMMARY
          echo "üîó **URL:** ${{ steps.deploy.outputs.production_url }}" >> $GITHUB_STEP_SUMMARY
          echo "üìÖ **Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "üë§ **Auteur:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "üìù **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

  # Job 4: Notifications (optionnel)
  notify:
    needs: [deploy-production]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: üìß Send notification
        run: |
          if [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "‚úÖ Notification: D√©ploiement r√©ussi"
          else
            echo "‚ùå Notification: D√©ploiement √©chou√©"
          fi
